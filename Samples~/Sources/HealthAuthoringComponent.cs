//<auto-generated/>
using Depra.Ecs.Hybrid.Components;
using Depra.Ecs.Hybrid.Entities;
using Depra.Ecs.QoL.Entities;
using Depra.Ecs.QoL.Worlds;
using Depra.Ecs.Worlds;
using UnityEngine;

namespace Depra.Ecs.Hybrid.Samples
{
	internal sealed class HealthAuthoringComponent : MonoBehaviour, IAuthoring
	{
		[SerializeField] private System.Single _value;

		IBaker IAuthoring.CreateBaker() => new Baker(this);

		private readonly struct Baker : IBaker
		{
			private readonly IAuthoring _authoring;

			public Baker(IAuthoring authoring) => _authoring = authoring;

			void IBaker.Bake(IAuthoring authoring, World world)
			{
				if (((IAuthoringEntity) authoring).TryGetEntity(out var entity))
				{
					world.Pool<Health>().Allocate(entity).Value = ((HealthAuthoringComponent) _authoring)._value;
				}
			}
		}
	}
}