//<auto-generated/>
using Depra.Ecs.Hybrid.Components;
using Depra.Ecs.Hybrid.Entities;
using Depra.Ecs.QoL.Entities;
using Depra.Ecs.QoL.Worlds;
using Depra.Ecs.Worlds;
using UnityEngine;

namespace Depra.Ecs.Hybrid.Samples
{
	internal sealed class DamageAuthoringComponent : MonoBehaviour, IAuthoring
	{
		[SerializeField] private System.Int32 _source;
		[SerializeField] private System.Single _amount;

		IBaker IAuthoring.CreateBaker() => new Baker(this);

		private readonly struct Baker : IBaker
		{
			private readonly IAuthoring _authoring;

			public Baker(IAuthoring authoring) => _authoring = authoring;

			void IBaker.Bake(IAuthoring authoring, World world)
			{
				if (((IAuthoringEntity) authoring).TryGetEntity(out var entity))
				{
					ref var component = ref world.Pool<Damage>().Allocate(entity);
					component.Source = ((DamageAuthoringComponent) _authoring)._source;
					component.Amount = ((DamageAuthoringComponent) _authoring)._amount;
				}
			}
		}
	}
}